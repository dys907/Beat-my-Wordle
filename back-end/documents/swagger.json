{
  "swagger": "2.0",
  "info": {
    "description": "This is the server for the game Beat My Wordle.",
    "version": "1.0.0",
    "title": "Beat My Wordle"
  },
  "host": "wordle.itsvicly.com",
  "basePath": "/1",
  "tags": [
    {
      "name": "users",
      "description": "User management and authentication"
    },
    {
      "name": "scores",
      "description": "For game score related queries"
    },
    {
      "name": "words",
      "description": "For user word entry related queries"
    },
    {
      "name": "games",
      "description": "For being matched with another player's word"
    },
    {
      "name": "matchmaking",
      "description": "For connecting games between 2 players"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/users/login": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "General login to the application",
        "description": "",
        "operationId": "generalLogin",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Users object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK"
          },
          "403": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "General login to the application",
        "description": "",
        "operationId": "logout",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "UserLogout object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserLogout"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK"
          }
        }
      }
    },
    "/users/signup": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "General user signup",
        "operationId": "userSignup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Users object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK"
          },
          "403": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/users/admin/login": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Admin login",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Users object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK"
          }
        }
      }
    },
    "/users/gamestatus": {
      "get": {
        "tags": [
          "users", 
          "games"
        ],
        "summary": "Checks if player has an ongoing game",
        "operationId": "checkUserGame",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "player",
            "in": "query",
            "description": "Check game status",
            "required": true,
            "type":"string"
          }
        ],
        "responses": {
          "200": {
            "description": "200: Player's ingame status checked"
          },
          "500": {
            "description": "500: Cannot contact server"
          }
        }
      }
    },
    "/words/check": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Checks user submitted 5 letter word against an external dictionary API",
        "description": "Checks a single word to see if it a valid 5 letter word",
        "operationId": "wordCheck",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "word",
            "in": "query",
            "description": "Word that needs to be checked by dictionary",
            "required": true,
            "type":"string"
          }
        ],
        "responses": {
          "200": {
            "description": "Word was successfully checked"
          },
          "404": {
            "description": "Word could not be checked, endpoint not reached"
          }
        }
      }
    },
    "/words/upload": {
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Upload a checked word to the Word microservice",
        "description": "Send valid word to word microservice ",
        "operationId": "wordUpload",
        "produces": ["html/text"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Username and their uploaded word",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Words"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Word has been uploaded"
          },
          "403": {
            "description": "Unauthorized."
          },
          "400": {
            "description": "Bad request."
          },
          "500": {
            "description": "Word could not be added, could not reach endpoint"
          }
        }
      }
    },
    "/words/update": {
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Update a checked word to the Word microservice",
        "description": "Send valid word to word microservice to replace currently saved one",
        "operationId": "wordUpdate",
        "produces": ["html/text"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Username and their updated word",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Words"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Word has been updated"
          },
          "403": {
            "description": "Unauthorized."
          },
          "400": {
            "description": "Bad request."
          },
          "500": {
            "description": "Word could not be added, could not reach endpoint"
          }
        }
      }
    },
    "/words/{username}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Sees the currently uploaded word of a user",
        "description": "See the word a user uploaded",
        "operationId": "wordView",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of the user to check ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "500": {
            "description": "Error connecting to server"
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Delete the word hosted by the user",
        "description": "Delete a word if a user has one hosted ",
        "operationId": "wordDelete",
        "produces": ["html/text"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "username associated to the word to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "200: Word deleted successfully"
          },
          "400": {
            "description": "400: Could not find word for this user"
          },
          "500": {
            "description": "500: Error could not reach database" 
          }
        }
      }
    },
    "/scores": {
      "post": {
        "tags": [
          "scores"
        ],
        "summary": "Change a user's score",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Score object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Scores"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 OK"
          }
        }
      }
    },
    "/scores/{username}": {
      "get": {
        "tags": [
          "scores"
        ],
        "summary": "Sees the score of a user",
        "description": "See the score a single user",
        "operationId": "scoreViewSingle",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "username of the score to view ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/scores/" : {
      "get": {
        "tags": [
          "scores"
        ],
        "summary": "Returns a map of all the scores stored",
        "description": "See all the user scores",
        "operationId": "scoreViewAll",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Scores not found"
          }
        }
      }
    },

    "/games": {
      "get": {
        "tags": [
          "matchmaking",
          "games"
        ],
        "summary": "Get a game for player",
        "description": "Check database for a new game for player",
        "operationId":"getGame",
        "produces":["application/json"],
        "parameters": [
          {
            "name": "word",
            "in": "query",
            "description": "Create a matchmade game",
            "required": true,
            "type":"string"
          }
        ],
        "responses": {
          "200": {
            "description": "200: Game match found"
          },
          "404": {
            "description": "404: No Games Available"
          }
        }
      },
      "post": {
        "tags": ["games",
        "matchmaking"],
        "summary": "Create game for player",
        "description": "Create match and log into game lobby table",
        "operationId": "createGame",
        "produces":["html/text"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Two usernames, player and opponent",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Match"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200: Lobby is available"
          },
          "400": {
            "description": "400: Lobby already exists, cannot create"
          },
          "500": {
            "description": "500: Error contacting server"
          }
        }
      },
      "patch": {
        "tags": ["games",
        "matchmaking"],
        "summary": "Updates game status for player",
        "description": "Toggles inProgress to false when a match concludes",
        "operationId": "updateGameStatus",
        "produces":["html/text"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Two usernames, player and opponent",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Match"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200: Game status updated successfully"
          },
          "400": {
            "description": "400: Game lobby does not exist or was not updated"
          },
          "500": {
            "description": "500: Error contacting server"
          }
        }
      }
    }
  },
  "definitions": {
    "Users": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Users"
      }
    },
    "UserLogout": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Users"
      }
    },
    "Words" : {
      "type": "object",
      "properties": {
        "username": {
          "type":"string"
        },
        "word": {
          "type":"string"
        }
      },
      "xml": {
        "name": "Words"
      }
    },
    "Match" : {
      "type": "object",
      "properties": {
        "player": {
          "type":"string"
        },
        "opponent": {
          "type":"string"
        }
      },
      "xml": {
        "name": "Match"
      }
    },
    "Scores" : {
      "type": "object",
      "properties": {
        "username": {
          "type":"string"
        },
        "score": {
          "type":"number"
        }
      },
      "xml": {
        "name": "Match"
      }
    }
  }
}